# -*- coding: utf-8 -*-
"""RockVsMine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VI5UCbe2YzLotjE7ltiMCTsvMa-lW2Q9

Importing Dependancies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#Importing data into a dataframe
sonar_data=pd.read_csv('Copy of sonar data.csv',header=None)
#Checking the dataframe
sonar_data.head()

#Checking the shape of the data frame
sonar_data.shape
#Checking the characteristics of data
sonar_data.describe()

#Counting data frequencies in 60th column
sonar_data[60].value_counts()

#Grouping the data by the 60th column and getting the mean
sonar_data.groupby(60).mean()

#Splitting Data
X=sonar_data.drop(columns=60,axis=1)
Y=sonar_data[60]

"""Training and Testing Data Split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)
print(X.shape,X_test.shape,X_train.shape)

"""Model Traning Logistic Regression"""

model=LogisticRegression()

#Traning the train data set
model.fit(X_train,Y_train)

"""Model Evaluation"""

#Finding model accuracy for training data
X_train_prediction = model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train) 
print(training_data_accuracy)

#Finding model accuracy for test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)
print(test_data_accuracy)

"""Making a prediction based on inputs!"""

input_data=(0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032,0.0453,0.0523,0.0843,0.0689,0.1183,0.2583,0.2156,0.3481,0.3337,0.2872,0.4918,0.6552,0.6919,0.7797,0.7464,0.9444,1.0000,0.8874,0.8024,0.7818,0.5212,0.4052,0.3957,0.3914,0.3250,0.3200,0.3271,0.2767,0.4423,0.2028,0.3788,0.2947,0.1984,0.2341,0.1306,0.4182,0.3835,0.1057,0.1840,0.1970,0.1674,0.0583,0.1401,0.1628,0.0621,0.0203,0.0530,0.0742,0.0409,0.0061,0.0125,0.0084,0.0089,0.0048,0.0094,0.0191,0.0140,0.0049,0.0052,0.0044)
inp_data_array=np.asarray(input_data)
inp_data_formatted=inp_data_array.reshape(-1,60)
prediction=model.predict(inp_data_formatted)
print(prediction)
size=len(prediction)
i=int(0)
for i in range (0,size):
  if(prediction[i]=='R'):
    print("Rock")
  else:
    print ("Mine")